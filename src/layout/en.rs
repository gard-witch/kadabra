use std::sync::LazyLock;

use super::{Key, Layout};

pub(crate) static EN: LazyLock<Layout> = LazyLock::new(|| {
    let mut en = Layout::default();
    en.insert(Key::GraveAccent, '`');
    en.insert(Key::Tilde, '~');
    en.insert(Key::At, '@');
    en.insert(Key::Hash, '#');
    en.insert(Key::Dollar, '$');
    en.insert(Key::Caret, '^');
    en.insert(Key::Ampersand, '&');
    en.insert(Key::KeyQ, 'q');
    en.insert(Key::KeyW, 'w');
    en.insert(Key::KeyE, 'e');
    en.insert(Key::KeyR, 'r');
    en.insert(Key::KeyT, 't');
    en.insert(Key::KeyY, 'y');
    en.insert(Key::KeyU, 'u');
    en.insert(Key::KeyI, 'i');
    en.insert(Key::KeyO, 'o');
    en.insert(Key::KeyP, 'p');
    en.insert(Key::LeftSquareBracket, '[');
    en.insert(Key::RightSquareBracket, ']');
    en.insert(Key::Backslash, '\\');
    en.insert(Key::KeyShiftQ, 'Q');
    en.insert(Key::KeyShiftW, 'W');
    en.insert(Key::KeyShiftE, 'E');
    en.insert(Key::KeyShiftR, 'R');
    en.insert(Key::KeyShiftT, 'T');
    en.insert(Key::KeyShiftY, 'Y');
    en.insert(Key::KeyShiftU, 'U');
    en.insert(Key::KeyShiftI, 'I');
    en.insert(Key::KeyShiftO, 'O');
    en.insert(Key::KeyShiftP, 'P');
    en.insert(Key::LeftCurlyBrace, '{');
    en.insert(Key::RightCurlyBrace, '}');
    en.insert(Key::VerticalBar, '|');
    en.insert(Key::KeyA, 'a');
    en.insert(Key::KeyS, 's');
    en.insert(Key::KeyD, 'd');
    en.insert(Key::KeyF, 'f');
    en.insert(Key::KeyG, 'g');
    en.insert(Key::KeyH, 'h');
    en.insert(Key::KeyJ, 'j');
    en.insert(Key::KeyK, 'k');
    en.insert(Key::KeyL, 'l');
    en.insert(Key::Semicolon, ';');
    en.insert(Key::Apostrophe, '\'');
    en.insert(Key::KeyShiftA, 'A');
    en.insert(Key::KeyShiftS, 'S');
    en.insert(Key::KeyShiftD, 'D');
    en.insert(Key::KeyShiftF, 'F');
    en.insert(Key::KeyShiftG, 'G');
    en.insert(Key::KeyShiftH, 'H');
    en.insert(Key::KeyShiftJ, 'J');
    en.insert(Key::KeyShiftK, 'K');
    en.insert(Key::KeyShiftL, 'L');
    en.insert(Key::Colon, ':');
    en.insert(Key::QuotationMark, '\'');
    en.insert(Key::KeyZ, 'z');
    en.insert(Key::KeyX, 'x');
    en.insert(Key::KeyC, 'c');
    en.insert(Key::KeyV, 'v');
    en.insert(Key::KeyB, 'b');
    en.insert(Key::KeyN, 'n');
    en.insert(Key::KeyM, 'm');
    en.insert(Key::Comma, ',');
    en.insert(Key::Period, '.');
    en.insert(Key::Slash, '/');
    en.insert(Key::KeyShiftZ, 'Z');
    en.insert(Key::KeyShiftX, 'X');
    en.insert(Key::KeyShiftC, 'C');
    en.insert(Key::KeyShiftV, 'V');
    en.insert(Key::KeyShiftB, 'B');
    en.insert(Key::KeyShiftN, 'N');
    en.insert(Key::KeyShiftM, 'M');
    en.insert(Key::LessThanSign, '<');
    en.insert(Key::GreaterThanSign, '>');
    en.insert(Key::QuestionMark, '?');
    en
});
